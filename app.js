const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const PDFDocument = require('pdfkit');
 const doc = new PDFDocument({
        size: [500, 300], // Width = 500, Height = 300
    });
const blobStream  = require('blob-stream');
const fs = require('fs');

const app = express();
const port = 3000;

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Set the views directory
app.set('views', path.join(__dirname, 'views'));

// Middleware to parse the form data
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static files if needed
app.use(express.static(path.join(__dirname, 'public')));

app.use('/bootstrap', express.static(path.join(__dirname, 'node_modules/bootstrap/dist'))); 

// Route to render the form using EJS
app.get('/', (req, res) => {
    res.render('index');  // This will render views/index.ejs
});


app.post('/generate-pdf', (req, res) => {
    const { name, pname, email, version, date, message, cdname, producer, writer, acmanager } = req.body;

    // Create a PDF document
    const doc = new PDFDocument({
		fontSize: 50,
        size: [2550, 3300], // Width = 500, Height = 300
        margins: { // Set custom margins
            top: 370,    // 50 points = ~0.7 inches
            bottom: 28,
            left: 985,
            right: 250
        }
    });
	
	let formattedDate = date;
	if (date && date.includes('-')) {
		const [year, month, day] = date.split('-');
		formattedDate = `${month}/${day}/${year}`;
	}

    // Set up response headers for downloading the PDF
    res.setHeader('Content-disposition', 'attachment; filename='+name+'_'+pname+'_'+formattedDate+'_'+version+'.pdf');
    res.setHeader('Content-type', 'application/pdf');   

    // Pipe the PDF into the response
    doc.pipe(res);


   // Add a background image (this will be behind the text)
    const backgroundImagePath = path.join(__dirname, 'public', 'background.jpg'); // Path to your background image
      doc.image(backgroundImagePath, 0, 0, { width: 2550, height: 3300 });

    // Add content that will overlap the background image
    doc.fontSize(25).fillColor('white').text('PDF Generated by PDFKit', {
        align: 'center',
        valign: 'center',
    });
	
	
    doc.link(985, 370, 980, 150, 'https://google.com');
	
    doc.moveDown(15.7);
    
    doc.fontSize(52.3)
		.fillColor('white')
		.font('Helvetica-Bold')
		.text(`Client:`)
		.font('Helvetica')
		.text(`${name}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Project Name / Campaign Name:`)
		.font('Helvetica')
		.text(`${pname}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Version:`)
		.font('Helvetica')
		.text(`${version}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Date:`)
		.font('Helvetica')
		.text(`${formattedDate}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Additional Information:`)
		.font('Helvetica')
		.text(`${message}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Creative Director:`)
		.font('Helvetica')
		.text(`${cdname}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Producer:`)
		.font('Helvetica')
		.text(`${producer}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Writer:`)
		.font('Helvetica')
		.text(`${writer}`)
		.moveDown()
		.font('Helvetica-Bold')
		.text(`Account Manager:`)
		.font('Helvetica')
		.text(`${acmanager}`)
		.moveDown();
    //doc.moveDown();
    //doc.text(`Email: ${email}`);
    //doc.moveDown();
   // doc.text(`Message: ${message}`);
	
    // Finalize the PDF and end the stream
    doc.end();
});


// Start the server
app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
	
});

console.log('Views directory: ', path.join(__dirname, 'views'));
